import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class DESEncrypt {

	public static String desEncrypt(String plaintext) throws Exception {
		byte[] keyBytes = new byte[]{-90, 39, 84, 13, -3, -56, 26, 12, 87, 98, -93, -6, -45, -64, -22, 39, -128, -73, -96, -126, -54, -12, -10, 105};
		byte[] ivBytes = new byte[]{46, -50, 27, 64, -112, 9, 87, 34};

		SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, "DESede");
		IvParameterSpec ivParameterSpec = new IvParameterSpec(ivBytes);

		Cipher cipher = Cipher.getInstance("DESede/CBC/PKCS5Padding");
		cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivParameterSpec);

		byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));
		String ciphertext = Base64.getEncoder().encodeToString(encryptedBytes);

		return ciphertext;
	}
	
		public static String convertStringToHex(String str) {
		StringBuilder stringBuilder = new StringBuilder();
		char[] charArray = str.toCharArray();
		
		for (char c : charArray) {
			String charToHex = Integer.toHexString(c);
			if (charToHex.equals("20")) {
				charToHex = "0";
			}
			stringBuilder.append(charToHex);
		}
		//System.out.println("Converted Hex from String: " + stringBuilder.toString());
		return stringBuilder.toString();
	}
	
	public static String convertHexToString(String hexStr) {
		StringBuilder output = new StringBuilder("");
		for (int i = 0; i < hexStr.length(); i += 2) {
			String str = hexStr.substring(i, i + 2);
			output.append((char) Integer.parseInt(str, 16));
		}
		return output.toString();
	}

	public static void main(String[] args) {
		if (args.length != 2 || !args[0].equals("-d")) {
			System.out.println("Usage: java desEncrypt -d <your-plaintext>");
			return;
		}

		String plaintext = args[1];

		try {
			String plaintext1 = new String(Base64.getDecoder().decode(plaintext), StandardCharsets.UTF_8);
			
			//String hex_plaintext = convertStringToHex(plaintext1);
			//plaintext1 = convertHexToString(hex_plaintext);
			
			String encryptedData = desEncrypt(plaintext1);
			System.out.println(encryptedData);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}